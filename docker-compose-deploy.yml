services:
  app:
    build:
      context: .
      args:
        - DEV=false
    restart: unless-stopped
    volumes:
      - static-data:/vol/web
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DEBUG=0
      - RESEND_API_KEY=${RESEND_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - FRONTEND_URL=${FRONTEND_URL}

    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER} -d ${DB_NAME}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  proxy:
    build:
      context: ./proxy
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:8000"
    volumes:
      - static-data:/vol/static

volumes:
  postgres-data:
  static-data:
